import os
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from PIL import Image, ImageDraw, ImageFont
from telegram.constants import ParseMode
from dotenv import load_dotenv
import cv2
import asyncio

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

INFERENCE_API_URL = 'http://ml-backend-container:8004/inference'

classes_colors = {
    'adj': (255, 0, 0),
    'int': (255, 255, 0),
    'geo': (0, 234, 255),
    'pro': (170, 0, 255),
    'non': (255, 127, 0)
}

def get_color_code(color_name):
    colors = {
        "red": (0, 0, 255),
        "green": (0, 255, 0),
        "blue": (255, 0, 0),
        "yellow": (0, 255, 255),
        "cyan": (255, 255, 0),
        "magenta": (255, 0, 255),
        "white": (255, 255, 255),
        "black": (0, 0, 0),
        "gray": (128, 128, 128)
    }
    return colors.get(color_name.lower(), (0, 0, 0))

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
default_params = {
    'model_name': 'yolov8',
    'model_text_AI_name': 'gpt3',
    'model_text_image_AI_name': 'gemini-pro-vision',
    'run_AI_assistante': 'false',
    'confidence_threshold': 0.1,
    'line_thickness': 6,
    'line_color': 'blue',
    'use_diff_color_for_diff_classes': 'true',
    'show_box_info': 'true',
    'class_font_scale': "0.9",
    'class_font_color': 'blue',
    'confidence_font_scale': "0.9",
    'confidence_font_color': 'blue'
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_params = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def get_user_params(user_id):
    if user_id not in user_params:
        user_params[user_id] = default_params.copy()
    return user_params[user_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # await update.message.reply_text('–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º\-–±–æ—Ç `ML bot` –ø—Ä–æ–µ–∫—Ç–∞ __VisionAI Suite__\. \n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è `ML bot` –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\.\n\n–î–ª—è –≥–∏–±–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è `ML bot` –ø–µ—Ä–µ–π–¥–∏—Ç–µ\n–≤ —Ä–∞–∑–¥–µ–ª `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`', reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    await update.message.reply_text('–¢–µ–ª–µ–≥—Ä–∞–º\-–±–æ—Ç ML bot —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ¬´–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª –Ω–∞ –ê—Ç–æ–º–∏–∫ –•–∞–∫ 2\.0\n\n***–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ML bot –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\.***\n\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ML bot –º–æ–∂–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)

async def show_main_menu(context, chat_id, text):
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    params = get_user_params(user_id)

    if query.data == 'func_settings':
        keyboard = [
            [InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data='choose_model')],
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é AI –º–æ–¥–µ–ª—å", callback_data='choose_text_ai')],
            [InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI", callback_data='choose_text_image_ai')],
            [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (run AI assistents)", callback_data='choose_run_AI_assistents')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=reply_markup)

    if query.data == 'view_settings':
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", callback_data='choose_confidence_threshold')],
            [InlineKeyboardButton("üìè –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π", callback_data='choose_line_thickness')],
            [InlineKeyboardButton("üñäÔ∏è –¶–≤–µ—Ç –ª–∏–Ω–∏–π", callback_data='choose_line_color')],
            [InlineKeyboardButton("üé® –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤", callback_data='choose_diff_color')],
            [InlineKeyboardButton("üî¨ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç—å", callback_data='choose_show_box_info')],
            [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å)", callback_data='choose_class_font_scale')],
            [InlineKeyboardButton("üñç –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å)", callback_data='choose_class_font_color')],
            [InlineKeyboardButton("üìù –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)", callback_data='choose_confidence_font_scale')],
            [InlineKeyboardButton("üñç –¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)", callback_data='choose_confidence_font_color')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=reply_markup)

    if query.data == 'settings':
        keyboard = [
            [InlineKeyboardButton("üõ† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='func_settings')],
            [InlineKeyboardButton("üåÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data='view_settings')],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='show_params')],
            [InlineKeyboardButton("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data='reset_defaults')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=reply_markup)

    elif query.data == 'back_to_main':
        keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_", reply_markup=reply_markup)

    elif query.data == 'reset_defaults':
        user_params[user_id] = default_params.copy()
        await query.edit_message_text(text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data == 'show_params':
        params_text = (
            f"__–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:__\n"
            f"–ú–æ–¥–µ–ª—å: `{params['model_name']}`\n"
            f"–¢–µ–∫—Å—Ç–æ–≤–∞—è AI –º–æ–¥–µ–ª—å: `{params['model_text_AI_name']}`\n"
            f"–ú–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç\+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI: `{params['model_text_image_AI_name']}`\n"
            f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã \(run AI assistents\): `{params['run_AI_assistante']}`\n"
            f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: `{params['confidence_threshold']}`\n"
            f"–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π: `{params['line_thickness']}`\n"
            f"–¶–≤–µ—Ç –ª–∏–Ω–∏–π: `{params['line_color']}`\n"
            f"–†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤: `{params['use_diff_color_for_diff_classes']}`\n"
            f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: `{params['show_box_info']}`\n"
            f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ \(–∫–ª–∞—Å—Å\): `{params['class_font_scale']}`\n"
            f"–¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ \(–∫–ª–∞—Å—Å\): `{params['class_font_color']}`\n"
            f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ \(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å\): `{params['confidence_font_scale']}`\n"
            f"–¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ \(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å\): `{params['confidence_font_color']}`"
        )
        await query.edit_message_text(text=params_text, parse_mode=ParseMode.MARKDOWN_V2)
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")


    elif query.data.startswith('choose_model'):
        keyboard = [
                [InlineKeyboardButton("yolov8", callback_data='model_yolov8')],
                [InlineKeyboardButton("resnet50", callback_data='model_resnet50')]
            ]
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('model_'):
        model_name = query.data.split('_')[1]
        params['model_name'] = model_name
        await query.edit_message_text(text=f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model_name}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")


    elif query.data.startswith('choose_text_ai'):
        keyboard = [
                [InlineKeyboardButton("llama3", callback_data='text_ai_llama3')],
                [InlineKeyboardButton("gpt3", callback_data='text_ai_gpt3')]
            ]
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é AI –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('text_ai_'):
        text_ai_name = query.data.split('_')[2]
        params['model_text_AI_name'] = text_ai_name
        await query.edit_message_text(text=f"–¢–µ–∫—Å—Ç–æ–≤–∞—è AI –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {text_ai_name}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_text_image_ai'):
        keyboard = [
                [InlineKeyboardButton("gemini-pro-vision", callback_data='text_image_ai_gemini')],
                [InlineKeyboardButton("clip", callback_data='text_image_ai_clip')]
            ]
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('text_image_ai_'):
        text_image_ai_name = query.data.split('_')[3]
        params['model_text_image_AI_name'] = text_image_ai_name
        await query.edit_message_text(text=f"–ú–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ AI –≤—ã–±—Ä–∞–Ω–∞: {text_image_ai_name}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_run_AI_assistents'):
        keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data='run_AI_assistents_true')],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data='run_AI_assistents_false')]
            ]
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (run AI assistants):", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('run_AI_assistents_'):
        run_AI_assistents = query.data.split('_')[3]
        params['run_AI_assistante'] = run_AI_assistents
        await query.edit_message_text(text=f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (run AI assistants) –≤—ã–±—Ä–∞–Ω: {run_AI_assistents}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_confidence_threshold'):
        keyboard = [
                [InlineKeyboardButton("0.3", callback_data='confidence_threshold_0.3')],
                [InlineKeyboardButton("0.5", callback_data='confidence_threshold_0.5')],
                [InlineKeyboardButton("0.7", callback_data='confidence_threshold_0.7')]
            ]
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å confidence:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith('confidence_threshold_'):
        confidence_threshold = float(query.data.split('_')[2])
        params['confidence_threshold'] = confidence_threshold
        await query.edit_message_text(text=f"–£—Ä–æ–≤–µ–Ω—å confidence –≤—ã–±—Ä–∞–Ω: {confidence_threshold}")
        await show_main_menu(context, query.message.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    elif query.data.startswith('choose_line_thickness'):
        keyboard = [
            [InlineKeyboardButton("1", callback_data='line_thickness_1')],
            [InlineKeyboardButton("2", callback_data='line_thickness_2')],
            [InlineKeyboardButton("3", callback_data='line_thickness_3')],
            [InlineKeyboardButton("4", callback_data='line_thickness_4')],
            [InlineKeyboardButton("5", callback_data='line_thickness_5')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–π:", reply_markup=reply_markup)
        await show_main_menu(context, query.message.chat_id, '–ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:')
    elif query.data.startswith('line_thickness_'):
        line_thickness = int(query.data.split('_')[2])
        params['line_thickness'] = line_thickness
        await query.edit_message_text(text=f"–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –≤—ã–±—Ä–∞–Ω–∞: {line_thickness}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")


    elif query.data.startswith('choose_line_color'):
        keyboard = [
            [InlineKeyboardButton("–ö—Ä–∞—Å–Ω—ã–π", callback_data='line_color_red')],
            [InlineKeyboardButton("–ó–µ–ª–µ–Ω—ã–π", callback_data='line_color_green')],
            [InlineKeyboardButton("–°–∏–Ω–∏–π", callback_data='line_color_blue')],
            [InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π", callback_data='line_color_black')],
            [InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data='line_color_white')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ª–∏–Ω–∏–π:", reply_markup=reply_markup)
    elif query.data.startswith('line_color_'):
        line_color = query.data.split('_')[2]
        params['line_color'] = line_color
        await query.edit_message_text(text=f"–¶–≤–µ—Ç –ª–∏–Ω–∏–π –≤—ã–±—Ä–∞–Ω: {line_color}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_diff_color'):
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='diff_color_true')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='diff_color_false')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤:", reply_markup=reply_markup)
    elif query.data.startswith('diff_color_'):
        diff_color = query.data.split('_')[2]
        params['use_diff_color_for_diff_classes'] = diff_color
        await query.edit_message_text(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤: {diff_color}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_show_box_info'):
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='show_box_info_true')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='show_box_info_false')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)
    elif query.data.startswith('show_box_info_'):
        show_box_info = query.data.split('_')[3]
        params['show_box_info'] = show_box_info
        await query.edit_message_text(text=f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç—å: {show_box_info}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_class_font_scale'):
        keyboard = [
            [InlineKeyboardButton("0.2", callback_data='class_font_scale_0.2')],
            [InlineKeyboardButton("0.4", callback_data='class_font_scale_0.4')],
            [InlineKeyboardButton("0.6", callback_data='class_font_scale_0.6')],
            [InlineKeyboardButton("0.8", callback_data='class_font_scale_0.8')],
            [InlineKeyboardButton("1.0", callback_data='class_font_scale_1.0')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å):", reply_markup=reply_markup)
    elif query.data.startswith('class_font_scale_'):
        class_font_scale = float(query.data.split('_')[3])
        params['class_font_scale'] = class_font_scale
        await query.edit_message_text(text=f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å) –≤—ã–±—Ä–∞–Ω: {class_font_scale}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_class_font_color'):
        keyboard = [
            [InlineKeyboardButton("–ö—Ä–∞—Å–Ω—ã–π", callback_data='class_font_color_red')],
            [InlineKeyboardButton("–ó–µ–ª–µ–Ω—ã–π", callback_data='class_font_color_green')],
            [InlineKeyboardButton("–°–∏–Ω–∏–π", callback_data='class_font_color_blue')],
            [InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π", callback_data='class_font_color_black')],
            [InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data='class_font_color_white')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å):", reply_markup=reply_markup)
    elif query.data.startswith('class_font_color_'):
        class_font_color = query.data.split('_')[3]
        params['class_font_color'] = class_font_color
        await query.edit_message_text(text=f"–¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (–∫–ª–∞—Å—Å) –≤—ã–±—Ä–∞–Ω: {class_font_color}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_confidence_font_scale'):
        keyboard = [
            [InlineKeyboardButton("0.2", callback_data='confidence_font_scale_0.2')],
            [InlineKeyboardButton("0.4", callback_data='confidence_font_scale_0.4')],
            [InlineKeyboardButton("0.6", callback_data='confidence_font_scale_0.6')],
            [InlineKeyboardButton("0.8", callback_data='confidence_font_scale_0.8')],
            [InlineKeyboardButton("1.0", callback_data='confidence_font_scale_1.0')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å):", reply_markup=reply_markup)
    elif query.data.startswith('confidence_font_scale_'):
        confidence_font_scale = float(query.data.split('_')[3])
        params['confidence_font_scale'] = confidence_font_scale
        await query.edit_message_text(text=f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å) –≤—ã–±—Ä–∞–Ω: {confidence_font_scale}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

    elif query.data.startswith('choose_confidence_font_color'):
        keyboard = [
            [InlineKeyboardButton("–ö—Ä–∞—Å–Ω—ã–π", callback_data='confidence_font_color_red')],
            [InlineKeyboardButton("–ó–µ–ª–µ–Ω—ã–π", callback_data='confidence_font_color_green')],
            [InlineKeyboardButton("–°–∏–Ω–∏–π", callback_data='confidence_font_color_blue')],
            [InlineKeyboardButton("–ß–µ—Ä–Ω—ã–π", callback_data='confidence_font_color_black')],
            [InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data='confidence_font_color_white')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å):", reply_markup=reply_markup)
    elif query.data.startswith('confidence_font_color_'):
        confidence_font_color = query.data.split('_')[3]
        params['confidence_font_color'] = confidence_font_color
        await query.edit_message_text(text=f"–¶–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å) –≤—ã–±—Ä–∞–Ω: {confidence_font_color}")
        await show_main_menu(context, query.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

async def call_inference_api(file_path: str, params: dict):
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as file:
            form = aiohttp.FormData()
            form.add_field('file', file, filename=os.path.basename(file_path))
            
            async with session.post(INFERENCE_API_URL, data=form, params=params) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    error_response = await response.json()
                    response_text = error_response.get("detail", str(error_response))
                    raise Exception(f"API call failed with status {response.status}: {response_text}")

async def process_image_and_send(file_path, params, file_id, update, context):
    try:
        inference_result = await call_inference_api(file_path, params)
        inference_result = inference_result["results"]

        img = cv2.imread(file_path)

        for box, cls_, conf in zip(inference_result['result_array_box'], inference_result['classes'], inference_result['confidence']):
            if conf >= params['confidence_threshold']:
                line_color_code = None
                if params['use_diff_color_for_diff_classes'] == "true":
                    line_color_code = classes_colors[cls_]
                else:
                    line_color_code = get_color_code(params['line_color'])
                img = cv2.rectangle(img, (box[0], box[1]), (box[2], box[3]), line_color_code, int(params['line_thickness']))
                font_color_code_class = get_color_code(params['class_font_color'])
                font_color_code_conf = get_color_code(params['confidence_font_color'])
                font_scale_class = params['class_font_scale']
                font_scale_conf = params['confidence_font_scale']
                if params['show_box_info'] == "true":
                    cv2.putText(img, cls_, (box[0], box[1]-15), cv2.FONT_HERSHEY_SIMPLEX, float(font_scale_class), font_color_code_class, int(params['line_thickness']))
                    cv2.putText(img, f"{conf:.2f}", (box[2], box[1]-15), cv2.FONT_HERSHEY_SIMPLEX, float(font_scale_conf), font_color_code_conf, int(params['line_thickness']))

        result_image_path = os.path.join('temp', 'result_' + file_id + '.jpg')
        cv2.imwrite(result_image_path, img)

        if not os.path.exists(result_image_path):
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.')
            return

        caption = (
            f"***Average confidence:***  `{'{:.2f}'.format(inference_result['avarage_confidence'])}`\n"
            f"***Inference time:***           `{'{:.3f} ms'.format(inference_result['inference_time'])}`\n"
        )

        AI_assistents_messages = (
            f"***Descriptions Text AI Model:***\n`{'{}'.format(inference_result['descriptions_text_AI_model'])}`\n\n"
            f"***Descriptions Image and Text AI Model:***\n`{'{}'.format(inference_result['descriptions_image_and_text_AI_model'])}`"
        )

        with open(result_image_path, 'rb') as result_image_file:
            await update.message.reply_photo(photo=result_image_file, caption=caption, parse_mode=ParseMode.MARKDOWN_V2)
        await context.bot.send_message(chat_id=update.message.chat_id, text=AI_assistents_messages, parse_mode=ParseMode.MARKDOWN_V2)
        await show_main_menu(context, update.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')
        await show_main_menu(context, update.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        params = get_user_params(user_id)

        if not params:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\.')
            return

        await context.bot.send_message(chat_id=update.message.chat_id, text="–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = os.path.join('temp', file.file_id + '.jpg')
        await file.download(custom_path=file_path)
        asyncio.create_task(process_image_and_send(file_path, params, file.file_id, update, context))

    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')
        await show_main_menu(context, update.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

async def handle_image_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        params = get_user_params(user_id)

        if not params:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            return

        document = update.message.document
        if not document.mime_type.startswith('image/'):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            return

        await context.bot.send_message(chat_id=update.message.chat_id, text="–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\.\.\.", parse_mode=ParseMode.MARKDOWN_V2)

        file = await document.get_file()
        file_path = os.path.join('temp', file.file_id + os.path.splitext(document.file_name)[1])
        await file.download(custom_path=file_path)
        asyncio.create_task(process_image_and_send(file_path, params, file.file_id, update, context))
        
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')
        await show_main_menu(context, update.message.chat_id, "_–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ_")

def main():
    if not os.path.exists('temp'):
        os.makedirs('temp')

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_image_file)) #IMAGE

    application.run_polling()

if __name__ == '__main__':
    main()
